package kr.co.redcore.controller.front;

import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.SessionAttributes;
import org.springframework.web.bind.support.SessionStatus;
import org.springframework.web.servlet.ModelAndView;

import kr.co.redcore.GlobalConstants;
import kr.co.redcore.annotation.CheckToken;
import kr.co.redcore.controller.BaseController;
import kr.co.redcore.domain.Tbl_member;
import kr.co.redcore.service.AuthNumService;
import kr.co.redcore.service.EmailService;
import kr.co.redcore.service.member.LoginService;
import kr.co.redcore.service.member.MemberPointService;
import kr.co.redcore.service.member.MemberService;

@Controller
public class PointOrderController extends BaseController {
	private static final Logger logger = LoggerFactory.getLogger(PointOrderController.class);

	@Autowired
	private LoginService loginService;	
	
	@Autowired
	private MemberPointService memberPointService;

	@InitBinder
	public void initBinder(WebDataBinder dataBinder) {
		// WebDataBinder에서 수정불가능한 필드를 나열한다.
		//dataBinder.setDisallowedFields("member_id", "member_level_seq");
	}
	
	@RequestMapping(value = "/front/member/point_order/pointList.do")
	public ModelAndView pointList(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params) throws Exception {
		ModelAndView mv = new ModelAndView();
		mv.setViewName(this.getFrontThemeRoute("member/point_order/pointList"));

		return mv;
	}
	
	@RequestMapping(value = "/front/member/point_order/pointBuyOrder.do")
	public ModelAndView pointBuyOrder(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params) throws Exception {
		long buy_point = Long.parseLong((String)req.getParameter("buy_point"));
		
		logger.debug("buy_point >>>> " + req.getParameter("buy_point"));
		
		ModelAndView mv = new ModelAndView();
		if((buy_point == 10000) || (buy_point == 15000) || (buy_point == 20000)) {
			// 이후에, 포인트구매 연동하면 이후에 error페이지 추가처리해야 함.
			// 포인트가 0으로 들어올수 있을때 에러처리를 해야 함.
			Tbl_member tbl_member = loginService.getLoginInfo(req, GlobalConstants.FRONT_LOGININFO_KEY);		
			memberPointService.buyOrderMemberPoint(tbl_member.getMember_id(), buy_point);
			
			mv.setViewName(this.getFrontThemeRoute("member/point_order/pointBuyOrderDone"));
			mv.addObject("buy_point", req.getParameter("buy_point"));
		} else {
			mv.setViewName(this.getFrontThemeRoute("member/point_order/pointBuyOrderFail"));			
		}
		
		return mv;
	}
}