package kr.co.redcore.controller.api;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Properties;
import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.json.JSONObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.MessageSource;
import org.springframework.context.support.ReloadableResourceBundleMessageSource;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.View;
import kr.co.redcore.GlobalConstants;
import kr.co.redcore.controller.BaseController;
import kr.co.redcore.domain.Tbl_member;
import kr.co.redcore.domain.api.JsonView;
import kr.co.redcore.domain.view.Vw_prd_mst;
import kr.co.redcore.domain.api.JsonResult;
import kr.co.redcore.service.CategoryService;
import kr.co.redcore.service.OptGroupService;
import kr.co.redcore.service.ProductService;
import kr.co.redcore.service.member.MemberService;
import kr.co.redcore.util.string.ConvertUtil;

@Controller
public class ExternallApiController extends BaseController {
	private static final Logger logger = LoggerFactory.getLogger(ExternallApiController.class);

	@Autowired
	private MessageSource messageSource;

	@Autowired
	private MemberService memberService;

	@Autowired
	private CategoryService categoryService;

	@Autowired
	private OptGroupService optGroupService;

	@Autowired
	private ProductService productService;

	@RequestMapping(value = "/api/external/checkMemberId.do")
	public View checkMemberId(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
		JsonResult jsonResult = new JsonResult();

		try {
			String member_id = (String) params.get("member_id");

			long memberCount = memberService.getTbl_memberCntByMember_id(member_id);
			if (memberCount > 0) {
				jsonResult.setResult_code(GlobalConstants.API_RESULT_SUCCESS);
			} else {
				jsonResult.setResult_code(GlobalConstants.API_RESULT_FAIL);
			}
		} catch (Exception ex) {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_FAIL);
		} finally {
			modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(jsonResult));
		}

		return new JsonView();
	}

	@RequestMapping(value = "/api/external/checkMemberNickName.do")
	public View checkMemberNickName(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
		String member_nick_name = (String) params.get("member_nick_name");

		long memberCount = memberService.getTbl_memberCntByMember_nick_name(member_nick_name);
		JsonResult jsonResult = new JsonResult();
		if (memberCount > 0) {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_SUCCESS);
		} else {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_FAIL);
		}

		modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(jsonResult));

		return new JsonView();
	}

	@RequestMapping(value = "/api/external/getMemberSeq.do")
	public View getMemberName(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
		String member_id = (String) params.get("member_id");

		Tbl_member tbl_member = memberService.getTbl_memberByMember_id(member_id);
		JsonResult jsonResult = new JsonResult();
		if (tbl_member != null) {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_SUCCESS);

			HashMap result_data = new HashMap();
			result_data.put("member_seq", tbl_member.getMember_seq());
			result_data.put("member_id", tbl_member.getMember_id());

			jsonResult.setResult_data(result_data);
		} else {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_FAIL);
		}

		modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(jsonResult));

		return new JsonView();
	}

	@RequestMapping(value = "/api/external/getCategoryList.do")
	public View getCategoryList(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
		List cateList = categoryService.getJsTreeTypeListByAll();

		// jstree에 맞게 jsonResult 객체를 사용하지 않음
		modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(cateList));

		return new JsonView();
	}

	// @RequestMapping(value = "/api/external/getOptGroupList.do")
	// public View getOptGroupList(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
	// List optGroupList = optGroupService.getTbl_opt_groupListByAll();
	//
	// // jstree에 맞게 jsonResult 객체를 사용하지 않음
	// modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(optGroupList));
	//
	// return new JsonView();
	// }

	@RequestMapping(value = "/api/external/getProductList.do")
	public View getProductList(HttpSession session, HttpServletRequest req, HttpServletResponse res, @RequestParam Map<String, Object> params, ModelMap modelMap) throws Exception {
		String cate_mst_seq = (String) params.get("cate_mst_seq");
		String prd_name = (String) params.get("prd_name");

		List prdList = null;
		if ((cate_mst_seq != null) && (prd_name != null)) {
			prdList = productService.getVw_prd_mstLastListExtMinusByCate_mst_seqEtc(Long.parseLong(cate_mst_seq), prd_name);
		} else if (cate_mst_seq != null) {
			prdList = productService.getVw_prd_mstLastListByCate_mst_seq(Long.parseLong(cate_mst_seq));
		}

		JsonResult jsonResult = new JsonResult();
		if (prdList != null) {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_SUCCESS);

			ArrayList result_dataList = new ArrayList();
			for (int i = 0; i < prdList.size(); i++) {
				Vw_prd_mst vw_prd_mst = (Vw_prd_mst) prdList.get(i);
				HashMap result_data = new HashMap();
				result_data.put("cate_mst_seq", vw_prd_mst.getCate_mst_seq());
				result_data.put("prd_mst_seq", vw_prd_mst.getPrd_mst_seq());
				result_data.put("prd_name", vw_prd_mst.getPrd_name());
				result_data.put("prd_in_price", vw_prd_mst.getPrd_in_price());
				result_data.put("prd_sl_price", vw_prd_mst.getPrd_sl_price());
				result_data.put("prd_mk_price", vw_prd_mst.getPrd_mk_price());
				result_dataList.add(result_data);
			}

			jsonResult.setResult_data(result_dataList);
		} else {
			jsonResult.setResult_code(GlobalConstants.API_RESULT_FAIL);
		}

		modelMap.put(GlobalConstants.API_FORMAT_JSON, ConvertUtil.generateJson(jsonResult));

		return new JsonView();
	}
}
